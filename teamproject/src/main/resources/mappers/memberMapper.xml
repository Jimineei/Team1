<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwillbs.mapper.MemberMapper">
	<!-- namespace를 사용해서 mapper 파일을 찾아오는 주소 설정 -->

	<!-- 시간정보 조회 -->
	<!-- <select id="getTime" resultType="string"> select now() </select> -->

	<!-- 회원가입 -->
	<!-- userid 컬럼명. -->
	<insert id="insertMember">
		insert into member (member_id,member_pw,member_name,member_email,member_tel,
		member_birth,department_id,employee_rank,create_date,update_date,
		permission_id, member_state,approval_status )
		values(#{member_id},#{member_pw},#{member_name},#{member_email},#{member_tel},null,
		null,'01', now(),now(),'01','01','01');
	</insert>

	<!-- 로그인 체크 -->
	<!-- <select id="loginMember" resultType="com.itwillbs.domain.MemberVO"> 
		select * from tbl_member where userid=#{userid} and userpw=#{userpw} </select> -->

	<!-- 로그인 체크 -->
	<select id="loginMember" resultType="MemberVO">
		select * from member
		where member_id=#{member_id}
	</select>

	<!-- 회원정보 조회 -->
	<select id="getMemberId" resultType="MemberVO">
		select * from member
		where member_id=#{member_id}
	</select>

	<!-- 회원정보 조회 -->
	<select id="getMemberEmail" resultType="MemberVO">
		select * from member
		where member_email=#{member_email}
	</select>

	<!-- 회원정보 조회 -->
	<select id="getMemberTel" resultType="MemberVO">
		select * from member
		where member_tel=#{tel}
	</select>

	<!-- 회원정보 수정 -->
	<!-- <update id="updateMember" > update tbl_member set useremail = #{useremail} 
		, updatedate = now(), username= #{username} where userid=#{userid} and userpw=#{userpw} 
		</update> -->

	<!-- 회원정보 삭제 -->
	<!-- <delete id="deleteMember"> delete from tbl_member where userid=#{userid} 
		and userpw=#{userpw} </delete> -->

	<!-- 회원정보 목록(list) -->
	<select id="getMemberList" resultType="MemberVO">
		SELECT
		m.member_id,
		m.member_pw,
		m.member_name,
		m.member_email,
		m.member_tel,
		m.member_birth,
		m.department_id,
		m.employee_rank,
		m.create_date,
		m.update_date,
		m.permission_id,
		m.approval_status,
		c1.common_status AS approval_status_value,
		c2.common_status AS member_state_value,
		c3.common_status AS employee_rank_value
		FROM
		member m
		LEFT JOIN
		common c1 ON m.approval_status = c1.common_value AND c1.common_work =
		'approval_status'
		LEFT JOIN
		common c2 ON m.member_state = c2.common_value AND c2.common_work =
		'member_state'
		LEFT JOIN
		common c3 ON m.employee_rank = c3.common_value AND c3.common_work =
		'emp_rank'
	</select>
	
	<select id="getMemberById" resultType="MemberVO">
	SELECT
		m.member_id,
		m.member_pw,
		m.member_name,
		m.member_email,
		m.member_tel,
		m.member_birth,
		m.department_id,
		m.employee_rank,
		m.create_date,
		m.update_date,
		m.permission_id,
		m.approval_status,
		c1.common_status AS approval_status_value,
		c2.common_status AS member_state_value,
		c3.common_status AS employee_rank_value
		FROM
		member m
		LEFT JOIN
		common c1 ON m.approval_status = c1.common_value AND c1.common_work =
		'approval_status'
		LEFT JOIN
		common c2 ON m.member_state = c2.common_value AND c2.common_work =
		'member_state'
		LEFT JOIN
		common c3 ON m.employee_rank = c3.common_value AND c3.common_work =
		'emp_rank'
		WHERE m.member_id = #{member_id}
	
	</select>

	<select id="getEmp_rank" resultType="String">
		SELECT common_status FROM common WHERE common_work = "emp_rank"
	</select>
	<select id="getApproval" resultType="String">
		SELECT common_status FROM common WHERE common_work = 'approval_status'
	</select>
	<select id="getMemberState" resultType="String">
		SELECT common_status FROM common WHERE common_work = 'member_state'
	</select>




</mapper>